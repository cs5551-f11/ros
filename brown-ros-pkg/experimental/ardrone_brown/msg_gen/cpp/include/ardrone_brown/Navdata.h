/* Auto-generated by genmsg_cpp for file /home/aghos7/ros/brown-ros-pkg/experimental/ardrone_brown/msg/Navdata.msg */
#ifndef ARDRONE_BROWN_MESSAGE_NAVDATA_H
#define ARDRONE_BROWN_MESSAGE_NAVDATA_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"

#include "std_msgs/Header.h"

namespace ardrone_brown
{
template <class ContainerAllocator>
struct Navdata_ : public ros::Message
{
  typedef Navdata_<ContainerAllocator> Type;

  Navdata_()
  : header()
  , batteryPercent(0.0)
  , rotX(0.0)
  , rotY(0.0)
  , rotZ(0.0)
  , altd(0)
  , vx(0.0)
  , vy(0.0)
  , vz(0.0)
  , tm(0.0)
  {
  }

  Navdata_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , batteryPercent(0.0)
  , rotX(0.0)
  , rotY(0.0)
  , rotZ(0.0)
  , altd(0)
  , vx(0.0)
  , vy(0.0)
  , vz(0.0)
  , tm(0.0)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef float _batteryPercent_type;
  float batteryPercent;

  typedef float _rotX_type;
  float rotX;

  typedef float _rotY_type;
  float rotY;

  typedef float _rotZ_type;
  float rotZ;

  typedef int32_t _altd_type;
  int32_t altd;

  typedef float _vx_type;
  float vx;

  typedef float _vy_type;
  float vy;

  typedef float _vz_type;
  float vz;

  typedef float _tm_type;
  float tm;


private:
  static const char* __s_getDataType_() { return "ardrone_brown/Navdata"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "0e8fc2a4b7f377e10e22371c42bfd78b"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "Header header\n\
\n\
# 0 means no battery, 100 means full battery\n\
float32 batteryPercent\n\
\n\
# left/right tilt in degrees (rotation about the X axis)\n\
float32 rotX\n\
\n\
# forward/backward tilt in degrees (rotation about the Y axis)\n\
float32 rotY\n\
\n\
# orientation in degrees (rotation about the Z axis)\n\
float32 rotZ\n\
\n\
# estimated altitude (cm)\n\
int32 altd\n\
\n\
# linear velocity (mm/sec)\n\
float32 vx\n\
\n\
# linear velocity (mm/sec)\n\
float32 vy\n\
\n\
# linear velocity (mm/sec)\n\
float32 vz\n\
\n\
#time stamp\n\
float32 tm\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, header);
    ros::serialization::serialize(stream, batteryPercent);
    ros::serialization::serialize(stream, rotX);
    ros::serialization::serialize(stream, rotY);
    ros::serialization::serialize(stream, rotZ);
    ros::serialization::serialize(stream, altd);
    ros::serialization::serialize(stream, vx);
    ros::serialization::serialize(stream, vy);
    ros::serialization::serialize(stream, vz);
    ros::serialization::serialize(stream, tm);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, header);
    ros::serialization::deserialize(stream, batteryPercent);
    ros::serialization::deserialize(stream, rotX);
    ros::serialization::deserialize(stream, rotY);
    ros::serialization::deserialize(stream, rotZ);
    ros::serialization::deserialize(stream, altd);
    ros::serialization::deserialize(stream, vx);
    ros::serialization::deserialize(stream, vy);
    ros::serialization::deserialize(stream, vz);
    ros::serialization::deserialize(stream, tm);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(header);
    size += ros::serialization::serializationLength(batteryPercent);
    size += ros::serialization::serializationLength(rotX);
    size += ros::serialization::serializationLength(rotY);
    size += ros::serialization::serializationLength(rotZ);
    size += ros::serialization::serializationLength(altd);
    size += ros::serialization::serializationLength(vx);
    size += ros::serialization::serializationLength(vy);
    size += ros::serialization::serializationLength(vz);
    size += ros::serialization::serializationLength(tm);
    return size;
  }

  typedef boost::shared_ptr< ::ardrone_brown::Navdata_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ardrone_brown::Navdata_<ContainerAllocator>  const> ConstPtr;
}; // struct Navdata
typedef  ::ardrone_brown::Navdata_<std::allocator<void> > Navdata;

typedef boost::shared_ptr< ::ardrone_brown::Navdata> NavdataPtr;
typedef boost::shared_ptr< ::ardrone_brown::Navdata const> NavdataConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::ardrone_brown::Navdata_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::ardrone_brown::Navdata_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace ardrone_brown

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::ardrone_brown::Navdata_<ContainerAllocator> > {
  static const char* value() 
  {
    return "0e8fc2a4b7f377e10e22371c42bfd78b";
  }

  static const char* value(const  ::ardrone_brown::Navdata_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x0e8fc2a4b7f377e1ULL;
  static const uint64_t static_value2 = 0x0e22371c42bfd78bULL;
};

template<class ContainerAllocator>
struct DataType< ::ardrone_brown::Navdata_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ardrone_brown/Navdata";
  }

  static const char* value(const  ::ardrone_brown::Navdata_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::ardrone_brown::Navdata_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header header\n\
\n\
# 0 means no battery, 100 means full battery\n\
float32 batteryPercent\n\
\n\
# left/right tilt in degrees (rotation about the X axis)\n\
float32 rotX\n\
\n\
# forward/backward tilt in degrees (rotation about the Y axis)\n\
float32 rotY\n\
\n\
# orientation in degrees (rotation about the Z axis)\n\
float32 rotZ\n\
\n\
# estimated altitude (cm)\n\
int32 altd\n\
\n\
# linear velocity (mm/sec)\n\
float32 vx\n\
\n\
# linear velocity (mm/sec)\n\
float32 vy\n\
\n\
# linear velocity (mm/sec)\n\
float32 vz\n\
\n\
#time stamp\n\
float32 tm\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::ardrone_brown::Navdata_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::ardrone_brown::Navdata_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::ardrone_brown::Navdata_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::ardrone_brown::Navdata_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.batteryPercent);
    stream.next(m.rotX);
    stream.next(m.rotY);
    stream.next(m.rotZ);
    stream.next(m.altd);
    stream.next(m.vx);
    stream.next(m.vy);
    stream.next(m.vz);
    stream.next(m.tm);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Navdata_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ardrone_brown::Navdata_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::ardrone_brown::Navdata_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "batteryPercent: ";
    Printer<float>::stream(s, indent + "  ", v.batteryPercent);
    s << indent << "rotX: ";
    Printer<float>::stream(s, indent + "  ", v.rotX);
    s << indent << "rotY: ";
    Printer<float>::stream(s, indent + "  ", v.rotY);
    s << indent << "rotZ: ";
    Printer<float>::stream(s, indent + "  ", v.rotZ);
    s << indent << "altd: ";
    Printer<int32_t>::stream(s, indent + "  ", v.altd);
    s << indent << "vx: ";
    Printer<float>::stream(s, indent + "  ", v.vx);
    s << indent << "vy: ";
    Printer<float>::stream(s, indent + "  ", v.vy);
    s << indent << "vz: ";
    Printer<float>::stream(s, indent + "  ", v.vz);
    s << indent << "tm: ";
    Printer<float>::stream(s, indent + "  ", v.tm);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ARDRONE_BROWN_MESSAGE_NAVDATA_H

